                                                                                        
@  Importation des,constantes symboliques WIDTH, HEIGHT, BYTES, BYTES_PER_LINE          
#include "image_bits_include.h"                                                         
                                                                                        
                 .global symetrie_octet                                                 
                 .global permuter_cols                                                  
                 .global symetrie_axe_v                                                 
                 .global permuter_ligne                                                 
                 .global symetrie_axe_h                                                 
                 .global symetrie_axe_h                                                 
                 .global permuter_lignes                                                
                 .global symetrie_axe_v                                                 
                                                                                        
                 .text                                                                  
                                                                                        
@ r0 : parametre reçu adresse                                                           
@ r1 : variable locale octet                                                            

#ifndef C_SYMETRIE_OCTET                                                                
#ifndef SYMTAB                                                                          
                                                                                        
                                                                                                                            
                      
    .data



    .text
    .global main

symetrie_octet :	push {r1,r2,r3,r4,lr}			@ on sauvegarde les appelants
					ldrb r3,[r0]					@ on charge la valeur d'un octet du tableau dans r3, registre dans lequel on va travailler
					mov r4,#0b00000000
					
					@ échange des quadruplets	
		
					and r1,r3,#0b00001111			@ on compare bit à bit notre octet avec 00001111 et on stocke le résultat dans r1
					add r1,r4,r1,lsl #4				@ on décale de 4 bits vers la gauche le résultat obtenu, puis on l'ajoute à r4, qui vaut 0
					and r2,r3,#0b11110000			@ on recommence en comparant cette fois notre octet avec 11110000
					add r3,r1,r2,lsr #4				@ on décale de 4 bits vers la droite le résultat puis on l'ajoute à r1 et on le stocke dans r3
					
					@ échanges des doublets

					and r1,r3,#0b11001100			@ on refait la même chose mais en comparant cette fois les doublets ...
					add r1,r4,r1,lsr #2				@ on décale le résultat de 2 bits vers la droite cette fois-ci
					and r2,r3,#0b00110011
					add r3,r1,r2,lsl #2				@ et on stocke toujours le résultat dans r3
					
					@ échange des bits
		
					and r1,r3,#0b10101010			@ même opération bit à bit cette fois
					add r1,r4,r1,lsr #1				@ on ne décale le résultat que d'un bit vers la droite ...
					and r2,r3,#0b01010101
					add r3,r1,r2,lsl #1				@ ... ou vers la gauche

		

					strb r3,[r0]					@ on remet r3 dans la valeur r0 de départ
					pop {r1,r2,r3,r4,lr}
					mov pc,lr
		               
endSymOct :  				bx lr

#endif 	// C_SYMETRIE_OCTET                                                                
#endif 	// @SYMTAB

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@





@ r0 : parametre tab                                                                    
@ r1 : parametre col 
                                                                  
#ifndef C_PERMUTER_COLS  
                                                               
permuter_cols : 	push {r1,r2,r3,r4,lr}					@ on sauvegarde les appelants
					
					ldr r2, adr_bytes_per_line				@ on calcule l'indice en décrémentant r2
					sub r2, r2, #1								
					sub r2, r2, r1
					
					ldrb r3, [r0, r2]						@ on charge la valeur a l'indice du tableau 1 et 2
					ldrb r4, [r0, r1]						
					
					strb r4, [r0, r2]						@ on échange les 2 valeurs obtenues
					strb r3, [r0, r1]
					
					pop {r1,r2,r3,r4,lr}					@ on revient vers l'appelant
					
					
end :				bx lr 

adr_bytes_per_line : .word BYTES_PER_LINE					@ définition de la variable
#endif // C_PERMUTER_COLS                                                               
                                                                                        
                        
                        
                        
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    
                        
                        
                                                                                        

@ r0 : paramètre image                                                                  
                                                                                        
#ifndef C_SYMETRIE_AXE_V   
                                                             
symetrie_axe_v: 			push {r0,r1,r2,r3,r4,r5,r6,r7,r8,lr}			@ on initialise nos variables
							ldr r4,adr_bytes
							mov r5,#0
							mov r2,r0
		
test_oct:					cmp r5,r4										@ tant que r5 < r4 on fait la symétrie octet
							bhs end_sym_oct

boucle_oct: 				add r0,r2,r5									@ on transfère r2 dans r0 pour pouvoir appeler notre fonction
							bl symetrie_octet								@ on effectue la symétrie octet avec la fonction du début
							add r5,r5,#1									@ on incrémente r5
							b test_oct
							
end_sym_oct:				mov r0,r2
							ldr r2,adr_height								@ on charge les variables dans les registres
							ldr r7,adr_bytes_per_line
							mov r8,r0

							mov r3,r7, lsr #1								@ on divise le nombre d'octets par ligne par 2
		
							mov r5,#0										@ on réinitialise notre r5 à 0
		
test_height: 				cmp r5,r2										@ tant que r5 < hauteur ...
	 						bhs end_height

for_height:					mul r6,r5,r7									@ ... on multiplie notre itérateur par le nombre d'octets par ligne
							add r0,r8,r6									
							mov r1,#0

test_width: 				cmp r1,r3										@ on compare ensuite r1 et le nombre d'octets par ligne / 2  
							bhs end_width
		
for_width:					bl permuter_cols								@ on effectue la permutation par colonne définie plus haut
							add r1,r1,#1									@ on incrémente r1
							b end_width

end_width:					add r5,r5,#1									@ on incrémente r5
							b test_height									@ on recommence la fonction tant que la hauteur de l'image n'est pas 																				@ atteinte

end_height:					pop {r0-r8,lr}   
							mov  pc,lr  
                                                                  
adr_width:	.word WIDTH														@ définition des variables 
adr_height:	.word HEIGHT
adr_bytes:       .word BYTES
@adr_bytes_per_line:	.word BYTES_PER_LINE                                                                       
                      
                      
                      
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                    
                      
                      
                      
                                                                                        
#endif // C_SYMETRIE_AXE_V                                                              
@ r0 : tab                                                                              
@ r1 : li                                                                               
                                                                                        
#ifndef C_PERMUTER_LIGNES          
                                                     
permuter_lignes:	mov r3, #0
					mov r1, #HEIGHT
					mov r2, #WIDTH
					mul r4, r2, r1
					sub r4, r4, #1
					add r4, r4, r0
debutFor :		
					cmp r3, #BYTES_PER_LINE
					beq finForLigne
		
						    
					ldrb r5, [r8]			@load octet du tableau
					mvn r5, r5			@Complément à 1 de l'octet 
					
ecrireDonnees: 		strb r5, [r8]			@ecriture de l'octet

					add r8, r8, #1 @aller addr suivante
				  	add r3, r3, #1 @+1 iterateur case tableau
					b debutFor

finForLigne: bx lr 
                
		                                                                    
                                                                                        
#endif // C_PERMUTER_LIGNES                                                             
                               
                               
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@                          
                               
                               
                                                                                        
@ r0 : paramètre image                                                                  
                                                                                        
#ifndef  C_SYMETRIE_AXE_H  
                                                             
symetrie_axe_h:		push {lr}
					mov r2,r0									@ on met l'image dans r2
					mov r3,#0									@ on initialise notre itérateur
				    ldr r4,adr_height							@ on stocke la hauteur dans r4
					mov r7,r4,lsr #1							@ on affecte à r7 la moitié de r4
					ldr r5,adr_bytes_per_line					
					
test_for1:			cmp r3,r7									@ tant que r3 < hauteur de l'image / 2 
					bhs fin_for1
					
boucle_for1:		mov r6,#0									@ r6 = 0

test_for2:			cmp r6,r5									@ tant que r5 > r6 
					bhs fin_for2
			
boucle_for2:		mov r1,r3									@ r1 = r3
					add r0,r2,r6								@ on met dans r0 image + colonne
					push {r1,r2,r3,r4,r5,r6,r7}					
					bl permuter_lignes							@ on permute la ligne 
					pop {r1,r2,r3,r4,r5,r6,r7}
					add r6,r6,#1								@ on incrémente la colonne
					bal test_for2								@ on refait le test de la 2e boucle for
			
fin_for2:			add r3,r3,#1								@ on incrémente la ligne
					bal test_for1								@ on refait le test de la 1e boucle for
			
fin_for1:			pop {lr}
					mov pc,lr                                                                      
                                                                                        
#endif   // C_SYMETRIE_AXE_H                                                            
